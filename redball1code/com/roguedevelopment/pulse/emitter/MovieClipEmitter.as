package com.roguedevelopment.pulse.emitter{	import com.roguedevelopment.pulse.PulseEngine;	import com.roguedevelopment.pulse.particle.DotParticle;	import com.roguedevelopment.pulse.particle.GenericFactory;	import com.roguedevelopment.pulse.particle.IParticleFactory;	import com.roguedevelopment.pulse.simple.SimpleParticles;		import flash.display.MovieClip;	import flash.display.Sprite;	import flash.events.Event;	import flash.geom.Point;	import flash.utils.getDefinitionByName;	public final class MovieClipEmitter extends MovieClip implements IParticleEmitter 	{		private var realEmitter:GenericEmitter = new GenericEmitter(20);		private var _config:String;						protected var _clipName:String;				protected var _rootClip:Boolean;		protected var origin:Point = new Point(0,0);				[Inspectable]		public function set movieClipName(val:String) : void		{			_clipName = val;				setupEmitter();		} 								public function get movieClipName() : String { return _clipName; }						[Inspectable]		public function set config(val:String) : void		{			_config = val;			setupEmitter();		}		public function get config() : String		{						return _config;		}				[Inspectable]		public function set rootEffect(val:Boolean ) : void		{			_rootClip = val;			setupEmitter();		}		public function get rootEffect() : Boolean { return _rootClip; }				[Inspectable]		public function set pps(val:Number) : void		{						realEmitter.pps = val;		}				public function MovieClipEmitter()		{						super();			width=10;			height=10;						addEventListener(Event.ADDED_TO_STAGE, onAdded );			addEventListener(Event.REMOVED_FROM_STAGE, onRemoved );			addEventListener(Event.ENTER_FRAME, onEnterFrame );			visible = false;			//			graphics.lineStyle(2,0xff0000);//			graphics.drawCircle(0,0,3);											}						protected function onEnterFrame(event:Event) : void		{						if( (realEmitter==null) || (realEmitter.root==null)){return;}			var p:Point = localToGlobal( origin );								p = realEmitter.root.globalToLocal(p);												realEmitter.x = p.x;			realEmitter.y = p.y;		}		/**		 * We want to auto start & stop		 * the emitter.		 **/		 protected function onRemoved( event:Event ) : void		 {		 	realEmitter.stop();		 			 }		protected function onAdded( event:Event ) : void		{						if( PulseEngine.instance.root == null )			{				if( stage != null )				{					PulseEngine.instance.root = stage;				}				else				{					PulseEngine.instance.root = parent;				}			}			setupEmitter();		}				protected function setupEmitter():void		{			if( realEmitter != null ){ realEmitter.stop(); }											var factory:IParticleFactory;			var rules:Array = [];						if(  (movieClipName == "" ) || (movieClipName == null) )			{				factory = new GenericFactory( DotParticle, rules, [] );				}			else			{				var cref:Class = getDefinitionByName( _clipName ) as Class;				factory = new GenericFactory( cref, rules, [] );			}									 			realEmitter.setFactory( factory );			SimpleParticles.configureEmitter(realEmitter, config );			realEmitter.start();			realEmitter.x = x;			realEmitter.y = y;			if( (parent is Sprite ) && (! _rootClip ) )			{				realEmitter.root = parent;			}			else			{				realEmitter.root = stage;			}								}								override public function set x(val:Number) : void		{						super.x = val;			realEmitter.x = val;		}				override public function set y(val:Number) : void		{			super.y = val;			realEmitter.y = val;		}		public function move(x:Number, y:Number ) : void		{			trace("moved " + x);		}		public function setSize(width:Number,height:Number):void		{			trace("setSize: " + width + " " + height );			this.width = width;			this.height = height;		}							public function start():void		{			realEmitter.start();		}				override public function stop():void		{			realEmitter.stop();		}				public function setFactory(particleFactory:IParticleFactory):void		{			throw new Error("MovieClip Emitter will worry about creating it's own factory based on the Flash authoring environment.");		}			}}